{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","src","map","ingredient","text","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","class","href","width","height","alt","onSubmit","e","preventDefault","type","placeholder","aria-label","value","onChange","target","recipe","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAyBeA,EAvBA,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,MAAMC,EAAiC,EAAjCA,SAASC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACnC,OACQ,yBAAKC,UAAU,UACX,4BAAKJ,GACL,yBAAKI,UAAU,QAAQC,IAAKH,IAC5B,yBAAKE,UAAU,eAAf,gBAGA,wBAAIA,UAAU,+BACTD,EAAYG,KAAI,SAAAC,GAAU,OACnB,wBAAIH,UAAU,mBACTG,EAAWC,UAI5B,yBAAKJ,UAAU,eAAf,YAGA,wBAAIA,UAAU,mBAAmBH,KCuClCQ,G,MAvDH,WAEV,IAFgB,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,WAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAShBC,qBAAU,WACRC,MACA,CAACH,IAEH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAZf,WAYe,oBAXd,uCAUG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAHC,2CAAH,qDAgBhB,OACE,yBAAKpB,UAAU,OACb,yBAAKA,UAAU,gCACb,uBAAGqB,MAAM,eAAeC,KAAK,KAC3B,yBAAKrB,IAAI,uBAAuBsB,MAAM,KAAKC,OAAO,KAAKC,IAAI,UAE7D,0BAAMzB,UAAU,cAAc0B,SAZlB,SAAAC,GAChBA,EAAEC,iBACFhB,EAASH,GACTC,EAAU,MAUJ,2BAAOV,UAAU,uBAAuB6B,KAAK,SAASC,YAAY,SAASC,aAAW,SAASC,MAAOvB,EAAQwB,SAjBjG,SAAAN,GACnBjB,EAAUiB,EAAEO,OAAOF,UAiBb,4BAAQhC,UAAU,uCAAuC6B,KAAK,UAA9D,YAGJ,yBAAK7B,UAAU,aACZO,EAAQL,KAAI,SAAAiC,GAAM,OACjB,kBAAC,EAAD,CACEC,IAAKD,EAAOA,OAAOE,MACnBzC,MAAOuC,EAAOA,OAAOE,MACrBxC,SAAUsC,EAAOA,OAAOtC,SACxBC,MAAOqC,EAAOA,OAAOrC,MACrBC,YAAaoC,EAAOA,OAAOpC,qBCvCnBuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e1b46abe.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Recipe = ({title,calories,image, ingredients}) => {\r\n    return (        \r\n            <div className=\"recipe\">\r\n                <h3>{title}</h3>                        \r\n                <img className=\"image\" src={image} />\r\n                <div className=\"card-header\">\r\n                    Ingredientes\r\n                </div>            \r\n                <ul className=\"list-group list-group-flush\">\r\n                    {ingredients.map(ingredient =>(\r\n                            <li className=\"list-group-item\">\r\n                                {ingredient.text}                            \r\n                            </li>                        \r\n                    ))}\r\n                </ul>\r\n                <div className=\"card-header\">\r\n                    Calorias\r\n                </div>\r\n                <li className=\"list-group-item\">{calories}</li>\r\n            </div>        \r\n    )    \r\n}\r\n\r\nexport default Recipe;","import React, {useEffect, useState} from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\n\nconst App = () => {\n\n  const APP_ID = \"cc17d757\";\n  const APP_KEY = \"68e00e7788cc1a09e9306c7885aeb918\t\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"chicken\");\n\n  useEffect(() => {\n    getRecipes();\n  },[query]);\n\n  const getRecipes = async () =>{\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  }\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar navbar-light bg-light\">\n        <a class=\"navbar-brand\" href=\"#\">\n          <img src=\"~/public/logo192.png\" width=\"30\" height=\"30\" alt=\"logo\"/>\n        </a>\n        <form className=\"form-inline\" onSubmit={getSearch}>\n          <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" value={search} onChange={updateSearch}/>\n          <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n        </form>\n      </nav>          \n      <div className=\"container\">          \n        {recipes.map(recipe => (\n          <Recipe \n            key={recipe.recipe.label} \n            title={recipe.recipe.label} \n            calories={recipe.recipe.calories} \n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}                \n      </div>        \n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}